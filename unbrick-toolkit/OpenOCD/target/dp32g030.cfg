#OpenOCD script for Action Dynamic DP32G030 ARM Cortex M0 CPU (UV-5R, UV-k5 Ham HTs)
#For use with cheap ST-Link USB debug probe
source target/swj-dp.tcl

set _CHIP_NAME DP32G0xx
set _ENDIAN little
set _WORKAREASIZE 0x1000
set _FLASH_SIZE 0x10000
set _CPUTAPID 0x0BB11477
set _TARGETNAME $_CHIP_NAME.cpu
set _FLASHNAME $_CHIP_NAME.flash
set _SECTOR_SIZE 512

adapter speed 960
adapter srst delay 100
reset_config srst_nogate

# Create a new dap, with name chip and role CPU, -enable let's OpenOCD to know to add it to the scan
swj_newdap $_CHIP_NAME cpu -expected-id $_CPUTAPID -enable

# Create the DAP instance, this must be explicitly created according to the OpenOCD docs
dap create $_CHIP_NAME.dap -chain-position $_CHIP_NAME.cpu

# Set up the GDB target for the CPU
target create $_CHIP_NAME.cpu cortex_m -endian $_ENDIAN -dap $_CHIP_NAME.dap
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# Declare internal bank
flash bank $_FLASHNAME stm32f1x 0x08000000 $_FLASH_SIZE 0 0 $_TARGETNAME

proc check_readiness {} {
	while {1} {
		set status [read_memory 0x4006F014 32 1]
		if {($status & 0x2) == 0} {
			break
		}
	}
}

proc rom_mask_off {} {
	echo "\nChecking ROM masking"
	set status [read_memory 0x4006F020 32 1]
	if {$status != 4} {
		echo [format "\nROM masking is set to 0b%03b. Unsetting..." $status]
		write_memory 0x4006F020 32 [expr {[read_memory 0x4006F020 32 1] & 0x3 }]
		check_readiness
		write_memory 0x4006F020 32 0
		check_readiness
		write_memory 0x4006F020 32 4
		check_readiness
	}
	return [read_memory 0x4006F020 32 1]
}

proc rom_mask_on {} {
	echo "\nChecking ROM masking"
	set status [read_memory 0x4006F020 32 1]
	if {$status != 6} {
		echo [format "\nROM masking is set to 0b%03b. Setting ON..." $status]
		write_memory 0x4006F020 32 [expr {[read_memory 0x4006F020 32 1] & 0x3 }]
		check_readiness
		write_memory 0x4006F020 32 2
		check_readiness
		write_memory 0x4006F020 32 6
		check_readiness
	}
	return [read_memory 0x4006F020 32 1]
}

proc unlock_rom {} {
	write_memory 0x4006F01c 32 0xAA
	check_readiness
}

proc rom_lock {} {
	write_memory 0x4006F018 32 0x55
	check_readiness
}
proc wipe_sector {sector_number} {
	echo -n [format "\rErasing sector 0x%02x = offset 0x%04x" [expr {$sector_number}]  [expr {$sector_number*256}]  ]
	write_memory 0x4006F000 32 0x09                           ;#set erasing mode
	write_memory 0x4006F004 32 [expr {$sector_number << 6}]
	write_memory 0x4006F010 32 0x01                           ;#set OPSTART=1
	check_readiness
}

proc wipe_sector_range {st_sec sec_count} {
        set last [expr {$st_sec + $sec_count}]
	for {set i $st_sec} {$i < $last} {incr i} {
		wipe_sector $i
	}
}

proc wipe_rom {} {
	unlock_rom
	#This will wipe everything including bootloader
	if {[rom_mask_off] != 4} {
		echo "\nROM Masking failed to disable!"
		close $fd
		return
	}
	wipe_sector_range 0 256
}

proc write_word {address value} {
	write_memory 0x4006F000 32 0x05                            ;#set writing mode
	write_memory 0x4006F004 32 [expr {($address>>2)+0xC000}]   ;#set address in flash
	write_memory 0x4006F008 32 $value                          ;#set word
	write_memory 0x4006F010 32 0x01                            ;#set OPSTART=1
	while {1} {
		set status [read_memory 0x4006F014 32 1]
		if {($status & 0x4) != 0} {
			break
		}
	}
	check_readiness
}

proc toggle_pin_gpioa {pin} {
    write_memory  0x40060000 16  [expr {[read_memory   0x40060000 16 1] ^(1<<$pin) }]
}

proc toggle_pin_gpiob {pin} {
    write_memory  0x40060800 16  [expr {[read_memory   0x40060800 16 1] ^(1<<$pin) }]
}

proc toggle_pin_gpioc {pin} {
    write_memory  0x40061000 16  [expr {[read_memory   0x40061000 16 1] ^(1<<$pin) }]
}

proc set_pin_gpioa {pin value} {
    if {$value == 0} {
        write_memory  0x40060000 16  [expr {[read_memory   0x40060000 16 1] &~(1<<$pin) }]
    } else {
        write_memory  0x40060000 16  [expr {[read_memory   0x40060000 16 1] |(1<<$pin) }]
    }
}

proc set_pin_gpiob {pin value} {
    if {$value == 0} {
        write_memory  0x40060800 16  [expr {[read_memory   0x40060800 16 1] &~(1<<$pin) }]
    } else {
        write_memory  0x40060800 16  [expr {[read_memory   0x40060800 16 1] |(1<<$pin) }]
    }
}

proc set_pin_gpioc {pin value} {
    if {$value == 0} {
        write_memory  0x40061000 16  [expr {[read_memory   0x40061000 16 1] &~(1<<$pin) }]
    } else {
        write_memory  0x40061000 16  [expr {[read_memory   0x40061000 16 1] |(1<<$pin) }]
    }
}

##Quansheng UVK5-specific snippets

proc uv_flash_bl {filename} {
	global _SECTOR_SIZE

	set fs [file size $filename]
	set fd [open $filename "rb"]
	set addr 0

	unlock_rom
	if {[rom_mask_off] != 4} {
		echo "\nROM Masking failed to disable!"
		close $fd
		return
	}

	wipe_sector_range 0 16
        echo "\nRegion cleared OK"

	while {![eof $fd]} {
		set data [read $fd 4]
		if {[string length $data] == 4} {
			if {$addr >= 0x1000} {
				echo [format "Bootloader upper boundary reached (%d)!" $addr]
				close $fd
				return
			}
			set b0 [scan [string index $data 0] %c]
			set b1 [scan [string index $data 1] %c]
			set b2 [scan [string index $data 2] %c]
			set b3 [scan [string index $data 3] %c]
			set i_data [expr {$b0 | $b1 << 8 | $b2 << 16 | $b3 << 24}]
			write_word $addr $i_data
			echo -n [format "\rWriting at offset 0x%04x (FLASH_ADDR=0x%04x)" $addr [expr {($addr>>2)+0xC000}]]
                        echo -n [format ",\tRemaining %02d %%    " [expr {(100-100*($addr+4)/$fs)}]]
			incr addr 4
		}
	}
        #relock flashROM, in case conventional method for fw is preferred
	rom_lock
	close $fd
}

proc uv_flash_fw {filename} {
	global _SECTOR_SIZE
        global _FLASH_SIZE

	set fs [file size $filename]
	set fd [open $filename "rb"]
	set addr 0x1000

	unlock_rom
	wipe_sector_range 16 [expr {(($fs+$_SECTOR_SIZE-1)&(0x10000000-$_SECTOR_SIZE))/($_SECTOR_SIZE/2)}]
        echo "\nRegion cleared OK"

	while {![eof $fd]} {
		set data [read $fd 4]
		if {[string length $data] == 4} {
			if {$addr >= $_FLASH_SIZE} {
				echo [format "Main firmware image upper boundary reached (%d)!" $addr]
				close $fd
				return
			}
			set b0 [scan [string index $data 0] %c]
			set b1 [scan [string index $data 1] %c]
			set b2 [scan [string index $data 2] %c]
			set b3 [scan [string index $data 3] %c]
			set i_data [expr {$b0 | $b1 << 8 | $b2 << 16 | $b3 << 24}]
			write_word $addr $i_data
			echo -n [format "\rWriting at offset 0x%04x (FLASH_ADDR=0x%04x)" $addr [expr {($addr>>2)+0xC000}]]
                        echo -n [format ",\tRemaining %02d %%    " [expr {100-(100*($addr-0xFFC)/$fs)}]]
			incr addr 4
		}
	}

	#Now hide bootloader
	if {[rom_mask_on] != 6} {
		echo "\nROM Masking failed to enable!"
		close $fd
		return
	}
	#relock flashROM, then reset CPU
	rom_lock
	close $fd
	reset
	echo "\nCPU reset: Transceiver should boot now."
}

proc uv_flashlight_toggle {} {
	toggle_pin_gpioc 3    ;# toggles PORTC.3
}

proc uv_flashlight_on {} {
	set_pin_gpioc 3 1     ;# set PORTC.3 high
}

proc uv_flashlight_off {} {
	set_pin_gpioc 3 0     ;# set PORTC.3 to low
}

proc uv_backlight_toggle {} {
	toggle_pin_gpiob 6    ;# toggles PORTB.6
}

init
#reset halt
